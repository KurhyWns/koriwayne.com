name: PR Security & Quality Checks

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better detection

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run detect-secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

  linting:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit safety

      - name: Run Black (Code Formatting)
        run: black --check --diff .

      - name: Run isort (Import Sorting)
        run: isort --check-only --diff .

      - name: Run Flake8 (Linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run MyPy (Type Checking)
        run: mypy . --ignore-missing-imports

      - name: Run Bandit (Security Linting)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety (Dependency Security)
        run: safety check --json --output safety-report.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  markdown-linting:
    name: Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: markdownlint "**/*.md" --ignore node_modules

  yaml-linting:
    name: YAML Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: yamllint .github/ mkdocs.yml

  docker-linting:
    name: Docker Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: '**/Dockerfile*'
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  kubernetes-linting:
    name: Kubernetes Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin

      - name: Run kubeval
        run: |
          find . -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|configmap|secret|ingress)" | xargs -I {} kubeval {} || true

      - name: Install kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz
          tar xf kube-score_linux_amd64.tar.gz
          sudo cp kube-score /usr/local/bin

      - name: Run kube-score
        run: |
          find . -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|configmap|secret|ingress)" | xargs -I {} kube-score score {} || true

  helm-linting:
    name: Helm Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Run Helm Lint
        run: |
          find . -name "Chart.yaml" -exec dirname {} \; | xargs -I {} helm lint {} || true

  terraform-linting:
    name: Terraform Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run tflint
        run: |
          find . -name "*.tf" -exec dirname {} \; | sort -u | xargs -I {} tflint {} || true

      - name: Run terraform fmt check
        run: |
          find . -name "*.tf" -exec dirname {} \; | sort -u | xargs -I {} sh -c 'cd {} && terraform fmt -check -diff' || true

  mkdocs-build:
    name: MkDocs Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build MkDocs
        run: mkdocs build --strict

      - name: Test MkDocs Links
        run: |
          pip install mkdocs-linkcheck
          mkdocs build
          linkchecker site/ --check-extern

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secrets-detection, linting, markdown-linting, yaml-linting, docker-linting, kubernetes-linting, helm-linting, terraform-linting, mkdocs-build]
    if: always()
    steps:
      - name: Security Check Summary
        run: |
          echo "## Security & Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "### Secrets Detection: ${{ needs.secrets-detection.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Code Linting: ${{ needs.linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Markdown Linting: ${{ needs.markdown-linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### YAML Linting: ${{ needs.yaml-linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Linting: ${{ needs.docker-linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Kubernetes Linting: ${{ needs.kubernetes-linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Helm Linting: ${{ needs.helm-linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Linting: ${{ needs.terraform-linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### MkDocs Build: ${{ needs.mkdocs-build.result }}" >> $GITHUB_STEP_SUMMARY
